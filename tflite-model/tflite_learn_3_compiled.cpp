/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 15.04.2025 13:23:37

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 3200;
#else
constexpr int kTensorArenaSize = 2176;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.03342612087726593, } };
const TfArray<1, int> quant0_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data5[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[10] = { 517, 23, -74, -55, -109, 193, -393, -228, -300, 549, };
const TfArray<1, int> tensor_dimension6 = { 1, { 10 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00032952177571132779, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[10*208] = { 
  28, -9, -64, -26, 18, -19, -59, -16, 2, 30, -4, 79, 63, -19, -22, -55, 10, -26, 8, -3, -2, -34, 30, 4, 8, 12, -1, -3, -5, -46, -21, -36, 5, -3, 9, 7, 6, -47, -52, 29, 8, 12, -45, 11, 2, 11, -26, -67, 34, -60, -50, 16, -33, 60, 0, 12, -42, 14, -80, 39, 16, 27, 23, -104, 3, -10, -57, -28, -31, 49, -82, 29, -41, 1, -35, 24, 16, 13, 23, -38, 22, -71, 51, -42, -65, 19, -41, 19, -3, -6, -38, -37, 15, 51, 0, -88, 42, -4, -20, -16, -104, 55, -50, 14, -4, 13, -57, 3, 9, 6, 1, -3, 33, -20, -4, -43, -32, 33, -15, 24, -5, 0, -5, -17, 46, 26, -20, -6, 11, 20, 48, -8, -45, 12, -4, 33, -5, -10, 0, 4, 40, 15, -1, 17, 31, 8, 55, -17, -96, 40, 3, 24, 36, -2, 18, -15, 27, 34, 37, -1, 42, -37, 28, 9, -64, 28, 32, 20, -48, -47, -127, -6, 12, 25, 64, -25, 13, 0, 3, -22, -2, 1, 66, 20, -15, -24, -60, -34, -21, -8, -16, -16, 28, -12, -34, -22, -15, 26, -8, 39, 15, 53, -36, -40, -29, -19, 35, -5, 
  58, -40, -2, -54, 5, -50, 8, 3, -77, -32, -88, -53, 15, 64, 28, -89, 43, -8, 15, -47, 56, -19, -12, 35, -60, -39, -54, -77, 19, 48, -7, -59, 34, 28, -25, -45, 32, -48, -20, 17, -23, -23, 56, -36, 17, 13, 32, -55, 42, -1, -26, -43, 34, -14, -37, 28, -29, 10, 24, -24, -1, 13, 6, -18, 16, 1, -4, -45, 20, -6, -38, -8, -23, 3, 20, -75, -27, 22, -32, 15, 16, -10, -6, -45, 7, -28, -36, 2, -60, -53, -54, -72, -18, 1, -22, -14, 17, 6, -5, -32, 18, 2, -111, 14, -31, -22, -38, -20, -20, -29, -3, -35, 27, 0, -2, -18, 19, -31, -32, 27, -60, -35, -13, -10, 22, 17, -20, -55, 31, -1, 2, -50, 16, -29, -81, 16, -11, 16, 3, -19, 6, -6, 19, -22, 38, 19, -25, -39, 69, -58, -19, 24, -37, 16, 33, -4, -5, 9, 10, -47, 25, -9, 24, -67, 40, -32, 20, 31, -18, -14, 2, -64, 9, 12, 24, -78, 39, -6, -12, -51, 53, -52, 42, 27, -35, -32, -98, -30, 19, 31, 32, -53, 27, -41, 26, -39, -2, -28, 61, 38, -39, -39, 2, -15, 9, 66, 32, -13, 
  -40, 0, -27, 16, 40, -31, -54, -25, -55, -55, -50, -111, 18, 11, -41, -4, -30, 27, 5, 3, 39, -35, -43, 12, -40, -18, 7, -97, -5, 10, -48, 3, -53, 30, 18, 22, 27, -42, -75, 2, -24, -54, 37, -55, -16, 45, -53, 8, -36, 24, -3, 4, 29, -21, -46, -15, -11, -40, -11, -25, -5, -14, -60, 32, -16, 33, 34, -34, 13, -40, 25, -5, -11, 6, 11, -58, -43, -3, 6, 25, -1, 34, 58, -29, 3, 13, -7, -11, 7, -3, 10, -27, 9, -14, -39, 21, 14, 14, -4, -56, 7, -5, 39, 24, 26, 29, 5, -35, -16, -23, -11, 33, 26, 4, -19, -59, 29, -4, -9, 1, 11, 16, -2, -59, 24, -20, -5, -20, 12, -15, -22, -40, 26, -5, 14, 25, -2, 43, -14, 6, 9, -13, 13, 40, 23, -32, -32, -57, -66, -6, -3, -20, 0, 44, -26, -41, 29, -13, -25, 23, 33, -38, -6, -46, -67, -2, 1, -2, 19, 52, 9, -30, 12, -11, -21, -4, 13, -65, -3, -31, -61, 1, 2, 37, 51, 52, 22, -8, 22, -4, -29, 34, 15, 14, 6, -4, -102, -22, -10, 3, 20, 35, -74, -7, -13, -25, 3, 21, 
  1, -5, -39, -21, 22, -52, 23, -23, 7, -26, -34, 0, -43, -46, -59, -38, -1, 19, -37, -17, 27, -35, -16, 28, -43, 6, -6, -63, -26, -29, -51, -46, -9, 30, 12, -2, 20, 4, -122, 25, -48, -28, 15, -61, 25, -57, -77, 4, -23, 33, -10, -35, 34, -22, -55, 8, -17, -37, -24, -72, 42, -20, -26, 31, -25, 4, 20, -4, 11, 6, 26, -20, 38, 23, 7, -94, -41, -8, -57, 30, -37, 31, 13, 16, 11, 29, -19, -10, 18, -16, 3, 14, 4, 10, -36, 37, -11, 52, 29, 19, 27, -21, 24, 8, 16, -19, -6, 9, -25, 17, 25, 0, -70, 6, 16, 22, 36, -38, -9, -27, 21, 3, 10, 6, -15, 39, 50, 19, -24, -28, -3, 32, -26, 0, -11, -7, 4, -23, -29, 32, -30, 13, 22, -47, -9, -58, -8, 43, -64, 0, -4, -10, 6, -44, -86, 28, -45, 13, 28, -63, -30, -56, -4, 34, 2, -4, -12, 0, 25, -35, -118, 10, -48, 5, 41, -31, -24, -60, -18, 26, -70, -30, 10, 13, 2, -15, -81, 34, -2, 14, 10, -49, -4, -73, -26, 32, -103, -4, -19, -9, -27, -36, -62, -43, -25, 16, 31, -5, 
  29, -41, -29, -36, -71, 18, 23, -17, 21, 42, 11, -51, -4, -6, -25, 12, 20, -7, 31, -39, -60, 5, 10, 11, 31, 18, 0, -26, 9, 13, -11, 47, 28, -28, 5, -48, -121, -17, 32, -10, 24, 27, -81, -64, -10, -2, 10, 4, 22, 13, 11, -28, 1, 25, 18, 3, -12, 32, 11, -2, -11, 13, -12, -7, 11, 40, -6, -34, 40, -8, 1, -19, 3, 13, 6, 7, -11, 18, -19, 1, 17, 48, -12, -30, 24, 9, 9, -20, 21, 14, -9, 14, -48, -38, -11, -4, -2, 27, 1, -54, 2, 14, -35, -30, 27, 34, 63, -33, -39, -79, -77, 56, 2, 29, 13, -40, -13, -14, -36, 2, -16, 35, -3, -14, 24, -56, -60, 26, -35, 4, 13, 3, 15, -13, -45, -1, -22, 4, -10, -11, -25, -14, -79, 5, -67, 30, 0, 16, 44, -62, -29, -17, -19, -39, 22, -102, -31, -32, -50, 30, -43, 14, 49, -33, 38, -53, 1, 14, -5, -31, -23, -67, -31, -1, -37, 11, 1, 31, 5, -16, 52, -41, 26, 6, -10, -1, 10, -121, -7, -7, -28, 23, -42, 21, 48, -20, 35, -46, 24, -6, -7, 22, 60, -67, -29, -16, -94, 17, 
  0, 46, 9, -64, 19, 7, -8, -3, 21, 20, 35, -113, -5, -37, 25, 50, 18, -13, 8, -12, -36, 28, 26, -3, 32, 37, 33, -19, 5, -28, -17, 35, 24, 6, -11, -27, -42, 9, 13, 22, -13, 10, -27, 33, -6, -58, 7, 4, 39, 7, -19, -47, -6, -19, 14, 14, 17, 50, 51, -4, 18, -85, -4, 8, 0, -27, 29, -47, -40, -22, 22, 17, 11, 7, 15, 12, -12, -83, -18, -2, -6, -19, -45, -70, -22, -2, -26, -11, 0, 3, 26, -34, -3, -61, -55, -5, 24, 6, 30, -41, -48, 10, 23, 12, 11, 15, 22, 1, -13, -67, -20, 12, 15, -1, 17, -32, -45, -14, -6, 22, -2, -4, 43, -20, 48, -38, 16, 26, 18, -20, 3, -39, -61, -2, 38, 12, -1, 26, 32, 2, 4, -70, -36, 57, 19, -11, -24, -3, 11, -11, -1, -8, 37, 34, 19, 37, 14, -46, -20, 13, 14, 25, -31, -6, -17, 6, 12, -41, 55, 57, 74, -26, 11, -118, -85, 42, 5, 31, -22, -17, -38, 9, 26, -12, 19, 32, -3, 4, 64, -48, -26, 42, -2, 11, 22, 10, -69, 52, 31, -50, 28, 12, -44, 5, -4, -66, -20, 9, 
  26, 6, 39, -28, 30, 15, 50, -22, 24, 44, 10, -51, -39, -100, -41, 25, 0, -8, -8, -39, -28, -1, 48, -8, 31, 31, 11, -38, 38, -19, -32, 16, 23, -6, -7, -13, -41, 10, 21, -12, 14, 48, 18, -57, 51, -73, -36, -8, 6, -19, 15, -45, -20, -24, 15, 15, 15, 59, 32, -62, 30, -30, -35, 9, 9, -33, -39, 4, -41, 2, 15, -36, 1, 12, 8, -40, 14, -54, -31, -51, -7, -40, -24, -10, -40, -39, -15, -20, -9, 8, 17, 11, -19, 20, 19, -8, 19, -34, 0, 10, -42, -7, -1, -30, -3, 14, 35, -16, -1, 34, 7, -2, -20, -32, 5, 32, -95, -23, -8, -24, -31, 11, 4, 4, -19, 27, 23, 38, -53, 4, -6, 23, -20, -11, -33, -22, -30, -77, -16, 28, 28, 21, 27, 14, -32, -20, -19, 39, -75, -13, 26, -30, -9, -59, 16, 28, -58, 16, 22, 16, -67, 4, -3, 33, -29, 6, -67, -70, -7, -26, 26, 27, -58, -11, 20, 21, -41, 28, -11, 26, -52, 13, -83, -47, -56, 4, -22, 26, -46, 10, 30, 8, -116, -4, -8, 47, -78, 0, -10, -4, -22, -3, -61, 26, -24, -73, 25, 2, 
  -17, -60, 12, 37, -58, 2, 24, 7, -3, -23, -37, 26, -31, 33, 6, -60, -23, -60, -22, 41, -75, -18, -16, -1, 3, -59, -68, 22, 4, 37, 14, -88, -8, -90, 5, 47, -115, -14, 17, -27, 3, -62, -73, 19, -20, 11, 43, -10, -22, 8, -20, 27, 22, 26, 3, -39, 2, -12, -5, 39, -29, 25, -9, 6, -23, 13, 15, 32, 29, 13, 10, 19, 38, -27, -14, 45, 33, 40, 23, 16, -15, -30, 0, 12, 24, -54, 50, -13, 35, -24, -21, -2, -10, 5, 9, -27, -65, -3, -25, -2, 23, -9, -47, -32, -12, -32, 19, 15, -26, 31, 9, 28, -25, 10, -3, 36, -1, -16, 1, 3, 14, -27, -8, 14, -24, 2, 10, -5, -16, 1, -14, -2, -2, -34, -29, -11, -62, -7, -2, -65, -19, 12, -27, 20, 1, 33, -1, -34, 48, -34, -56, 38, -5, -18, 17, -105, -20, 31, -27, 20, 10, 8, 26, -49, 39, -37, -22, 26, -18, -21, -27, -69, 3, 22, -5, -62, -15, 2, -13, -45, 45, -44, 6, 9, -21, -25, -23, -110, -48, 25, -16, -25, 20, 0, -97, -60, 34, 3, -49, -8, -26, -43, 12, -91, 9, 34, -30, -86, 
  -39, 20, 6, 26, -43, 26, 4, 13, -19, -39, 33, 20, -30, 26, 18, 15, -54, -7, -17, 50, -87, -1, -17, -36, -6, -26, -24, 47, -47, 14, 43, 0, -67, -5, -31, 60, -80, 1, -16, -42, 6, -32, -7, 19, -13, 15, 30, 24, -5, 5, 14, 37, -97, 14, 1, -28, 1, 4, -50, 45, -41, 15, -9, -10, 15, -40, 10, 40, -84, -11, 2, 5, -20, 8, -20, 39, -4, -6, 4, 25, 9, 16, -27, -9, -21, -2, -4, -2, -4, 4, 9, 0, -3, -4, 17, 29, 42, -52, 24, 19, -83, -21, -4, -8, -29, 17, -40, 7, 31, 11, 8, -26, 20, -37, -30, 0, -85, -10, 3, -22, -41, -8, 12, 4, -14, -36, -4, -1, 28, 12, 34, 6, -46, 13, 17, 17, -1, 21, 29, -44, 40, -71, -20, 24, 47, -34, -13, -62, -60, -3, 23, 7, 7, 50, -18, -63, 34, -103, -13, 3, 11, -23, 9, -10, -53, 13, 14, 16, 43, 67, 45, 23, 24, -58, -43, 34, 20, 8, -40, -49, -43, 12, -15, -25, 29, 52, 14, -20, 22, -78, -55, 24, -9, 8, 25, -38, -64, -14, -19, -4, -1, 18, -48, 8, 32, -47, -73, 22, 
  -37, -15, 7, 39, -23, 61, 16, 41, 36, -6, 18, 43, -39, -3, -9, -37, -75, 28, -54, 45, -52, 39, -92, -59, 9, -26, 50, 54, -21, 1, 34, -19, -57, 16, 29, 33, -59, 31, 15, -29, 2, -20, 26, 51, 20, -38, -13, 1, -14, -8, 18, 49, -81, 27, 38, 26, 32, -2, -16, 43, 1, 37, 18, -14, -11, -1, 16, 20, -101, 67, 4, -4, -4, -43, -92, 68, -15, 5, 11, -53, -51, -65, -21, 3, -50, -8, -2, -46, -32, -90, -34, 15, -6, 16, 12, -49, -71, -27, 37, 18, -48, -22, 19, 19, -2, -85, -37, 31, 4, 15, 32, -29, -14, 40, -9, 25, -42, 13, 40, -17, 6, -31, -11, -11, -17, -29, 27, -14, -70, -1, 2, 17, -25, -3, -23, -16, -10, -51, -18, 25, 3, 24, 23, -9, -12, -41, -9, 62, -98, 13, 24, -8, -10, -29, -81, 18, -9, 0, 17, -30, -30, -14, -14, 16, -93, 22, -29, 10, -49, -31, -17, 31, -17, 19, 31, -78, -28, 9, 7, 33, -48, 30, -64, 14, 2, -25, -9, 32, -36, 28, 20, -41, -7, 38, 14, 1, -58, 64, -44, -1, -9, -32, -14, 25, -65, -115, 13, -49, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 10,208 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0056792511604726315, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -1280, -643, -1032, -439, -103, 353, -792, -1122, -830, -1039, 693, 688, -114, -196, -360, 64, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00018113598343916237, 0.0001508880959590897, 0.0001660451089264825, 0.00020728776871692389, 0.00025947889662347734, 0.00017390628636348993, 0.0001463627559132874, 0.00013494420272763819, 0.00015296979108825326, 0.00016638607485219836, 0.00018866908794734627, 0.00027391669573262334, 0.00017918158846441656, 0.00019851523393299431, 0.00019848589727189392, 0.00025264261057600379, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ -2,74,25,114,-53,40,2,-76, -16,8,-19,16,-82,81,19,-127, -24,41,-33,55,-82,31,15,-84, 
  /* [1][0][][] */ -101,43,-40,9,7,-120,-20,36, -70,-34,-81,-101,51,-13,113,127, 3,-27,-18,-111,-1,-118,46,-26, 
  /* [2][0][][] */ -62,-16,-41,36,-14,-46,19,2, 127,-20,35,29,14,-98,-1,53, -58,45,-12,-50,-30,-26,32,-14, 
  /* [3][0][][] */ 33,-123,41,-12,63,-48,-98,-14, -7,-96,54,16,20,-49,-73,-27, -31,-70,11,-16,127,-45,-25,-18, 
  /* [4][0][][] */ -91,-127,-74,-31,-31,-20,122,22, -104,-94,-78,-52,5,15,65,0, -40,-57,-29,-53,-19,35,61,-2, 
  /* [5][0][][] */ -55,85,67,68,-16,-62,-67,74, -127,19,-61,-13,48,81,-64,-12, -87,79,7,7,27,17,-57,45, 
  /* [6][0][][] */ 97,-54,63,94,-102,-17,-5,13, 123,-93,110,-82,-74,26,-49,16, -57,-127,-87,4,-71,69,-55,-92, 
  /* [7][0][][] */ -15,50,-21,-127,-86,84,77,-45, 68,113,78,104,-18,39,48,-49, 21,67,-44,-20,-15,15,2,-38, 
  /* [8][0][][] */ 49,-108,50,87,-9,7,-24,54, -10,-69,-29,105,9,-28,-89,127, -28,-48,-1,81,-4,19,-60,-52, 
  /* [9][0][][] */ -24,-111,-2,110,-39,95,-28,-21, -44,-67,-44,36,-44,32,-63,-64, -87,-99,-99,127,-81,85,-66,51, 
  /* [10][0][][] */ -84,-56,-61,20,37,-3,12,-29, -127,-73,-30,8,-1,-19,-7,27, -27,-70,-21,65,-8,54,-56,126, 
  /* [11][0][][] */ -27,-37,-29,32,24,13,-20,-63, -11,-42,61,-4,127,-37,-16,-27, -2,-47,13,-6,16,-65,-16,-20, 
  /* [12][0][][] */ -127,-21,-98,74,-74,22,28,-31, -25,-15,-101,-41,-54,40,11,-33, 72,-5,58,34,-6,-28,-12,-19, 
  /* [13][0][][] */ 45,51,12,-34,1,-32,-102,-80, 61,25,-7,-5,-27,-83,-127,-66, -4,81,103,6,126,-86,-110,-35, 
  /* [14][0][][] */ 11,31,62,-36,21,8,23,-90, -22,20,127,-18,33,-38,7,-85, 27,-46,38,-10,88,-95,-21,-61, 
  /* [15][0][][] */ 39,1,-28,-81,19,-55,-12,52, 13,-17,6,-64,-9,-127,13,25, 6,-13,7,-66,-76,-84,3,67, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0042906766757369041, 0.0035741766914725304, 0.0039332099258899689, 0.0049101496115326881, 0.0061464319005608559, 0.0041194222867488861, 0.0034669821616262197, 0.0031965041998773813, 0.0036234869621694088, 0.0039412868209183216, 0.0044691176153719425, 0.0064884289167821407, 0.0042443815618753433, 0.0047023491933941841, 0.004701654426753521, 0.0059844967909157276, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[8] = { -1044, -985, -1415, -2785, -5307, -2661, -3782, -3264, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 0.00016657520609442145, 0.00020761662744916975, 0.00018398708198219538, 0.00016133482859004289, 0.00014184560859575868, 0.00013754716201219708, 0.0001382707996526733, 0.00013300312275532633, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[8*1*3*13] = { 
  /* [0][0][][] */ -21,31,65,-9,-95,-4,102,-63,-13,20,17,-37,60, -77,-105,41,-50,-39,9,3,-3,-11,-4,22,7,37, -27,-127,76,-62,-62,30,34,-18,30,-20,6,-16,56, 
  /* [1][0][][] */ -67,-64,-79,-60,-16,30,-11,29,18,14,10,-12,4, -70,127,46,-89,52,23,50,14,-9,18,-15,-8,-59, -88,-8,-19,-20,64,-38,-3,41,28,45,-25,-9,-35, 
  /* [2][0][][] */ 45,116,36,-54,-67,-43,77,40,-34,16,-29,-13,41, -41,-17,127,-2,-95,52,24,58,-2,-23,-52,40,-4, -37,-34,87,-60,-54,42,-8,61,33,-44,-9,4,10, 
  /* [3][0][][] */ 25,33,-79,-89,73,-27,80,10,127,-54,-53,-48,6, 62,9,-60,56,4,85,-21,4,11,22,19,-28,-8, 107,-89,-9,42,39,124,-11,-49,26,20,-2,-23,-114, 
  /* [4][0][][] */ 78,-17,73,26,-97,15,36,40,-9,-43,-45,53,31, 68,71,127,-27,-89,-63,82,22,-14,-57,-4,59,-3, 18,83,116,-52,-98,-32,65,1,8,-55,-73,102,-10, 
  /* [5][0][][] */ -8,37,-126,10,75,30,-8,-37,5,51,-39,49,-42, 30,-44,-42,-30,75,49,-9,-63,39,102,-65,8,-39, 26,-7,-127,61,-13,63,-122,-55,114,38,-15,-124,58, 
  /* [6][0][][] */ 121,95,-5,87,15,-96,-118,50,11,10,-75,15,22, 6,54,10,38,127,-97,-116,44,-10,7,-32,-2,-9, 98,23,21,20,57,-80,-105,66,-47,41,-63,86,32, 
  /* [7][0][][] */ -51,15,-24,114,8,-66,-68,47,-36,-95,119,-66,60, -127,-13,-45,73,42,-49,-34,-31,41,-95,10,51,18, -111,4,6,103,-35,-69,7,42,-39,-90,88,-12,64, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0049833841621875763, 0.0062112091109156609, 0.0055042905732989311, 0.0048266095109283924, 0.0042435559444129467, 0.0041149603202939034, 0.0041366093792021275, 0.0039790174923837185, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.03342612087726593, } };
const TfArray<1, int> quant12_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.042216181755065918, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.042216181755065918, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.042216181755065918, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.042216181755065918, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.058022048324346542, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.058022048324346542, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.058022048324346542, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<1, float> quant20_scale = { 1, { 0.058022048324346542, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,10 } };
const TfArray<1, float> quant21_scale = { 1, { 0.20746926963329315, } };
const TfArray<1, int> quant21_zero = { 1, { 31 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,10 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 656), (TfLiteIntArray*)&g0::tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 2080, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 656), (TfLiteIntArray*)&g0::tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension21, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
